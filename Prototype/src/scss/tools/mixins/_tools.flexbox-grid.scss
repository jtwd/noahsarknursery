// ----------------------------------------------------------------------

// Tools: flexbox-grid

// ----------------------------------------------------------------------

////
/// @author   James Taylor
/// @group    jw
/// @created  20/06/2016
////

/// Grid system
//
// Generate semantic grid columns with these mixins.

@mixin make-container($gutter: $grid-gutter-width) {
  margin-left: auto;
  margin-right: auto;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);
}

// For each breakpoint, define the maximum width of the container in a media query
@mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {
  @each $breakpoint, $container-max-width in $max-widths {
    @include mq(map-get($breakpoints, $breakpoint)) {
      max-width: $container-max-width;
    }
  }
}

@mixin make-row($gutter: $grid-gutter-width, $wrap: wrap, $alignContent: stretch) {
  display: flex;
  flex-wrap: $wrap;
  align-content: $alignContent;
  margin-left: ($gutter / -2);
  margin-right: ($gutter / -2);
}

@mixin make-col($gutter: $grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);
  flex-grow: 1;
}

@mixin make-col-span($size, $columns: $grid-columns) {
  flex: 0 0 percentage($size / $columns);
}

@mixin make-col-offset($size, $columns: $grid-columns) {
  margin-left: percentage($size / $columns);
}

@mixin make-col-push($size, $columns: $grid-columns) {
  left: if($size > 0, percentage($size / $columns), auto);
}

@mixin make-col-pull($size, $columns: $grid-columns) {
  right: if($size > 0, percentage($size / $columns), auto);
}

@mixin make-col-modifier($type, $size, $columns) {
  // Work around the lack of dynamic mixin @include support (https://github.com/sass/sass/issues/626)
  @if $type == push {
    @include make-col-push($size, $columns);
  } @else if $type == pull {
    @include make-col-pull($size, $columns);
  } @else if $type == offset {
    @include make-col-offset($size, $columns);
  }
}

@mixin Make-grid-columns($columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {
  // Common properties for all breakpoints
  .col {
    @include make-col;

    .demo & {
      &:after {
        content: 'col';
      }
    }
  }
  @each $breakpoint in map-keys($breakpoints) {
    @include mq(map-get($breakpoints, $breakpoint)) {
      @for $i from 1 through $columns {
        @if $breakpoint == 'zero' {
          .col--#{$i} {
            @include make-col-span($i, $columns);

            .demo & {
              &:after {
                content: 'col col--#{$i}';
              }
            }
          }
        } @else {
          .col-#{$breakpoint}--#{$i} {
            @include make-col-span($i, $columns);
            .demo & {
              &:after {
                content: 'col col-#{$breakpoint}--#{$i}';
              }
            }
          }
        }
      }
      @each $modifier in (pull, push, offset) {
        @for $i from 0 through $columns {
          @if $breakpoint == 'zero' {
            .col-#{$modifier}--#{$i} {
              @include make-col-modifier($modifier, $i, $columns)
            }
          } @else {
            .col-#{$breakpoint}--#{$modifier}-#{$i} {
              @include make-col-modifier($modifier, $i, $columns)
            }
          }
        }
      }
    }

  }
}


